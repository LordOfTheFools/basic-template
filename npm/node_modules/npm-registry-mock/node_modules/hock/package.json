{
  "name": "hock",
  "description": "A mocking server for HTTP requests",
  "version": "0.2.0",
  "author": {
    "name": "Maciej MaÅ‚ecki",
    "email": "me@mmalecki.com"
  },
  "contributors": [
    {
      "name": "Ken Perkins",
      "email": "ken.perkins@rackspace.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/mmalecki/hock.git"
  },
  "keywords": [
    "mock",
    "http",
    "test"
  ],
  "dependencies": {
    "underscore": "1.4.x"
  },
  "devDependencies": {
    "request": "2.20.x",
    "should": "1.2.x",
    "mocha": "1.9.x"
  },
  "main": "./lib/hock",
  "scripts": {
    "test": "make test"
  },
  "engines": {
    "node": ">=0.8.x"
  },
  "readme": "# hock [![Build Status](https://secure.travis-ci.org/mmalecki/hock.png?branch=master)](http://travis-ci.org/mmalecki/hock)\n\nAn HTTP mocking server based on [Nock](https://github.com/flatiron/nock).\n\n## Overview\n\nHock is an HTTP mocking server with an API designed to closely match that of Nock. The key difference between Nock and Hock is that nock works by overriding `http.clientRequest`, allowing requests to be intercepted before they go over the wire.\n\nHock is designed as a fully functioning HTTP service. You enqueue requests and responses in a similar fashion to Nock:\n\n```Javascript\n\n    var hock = require('hock'),\n        request = require('request');\n\n    hock.createHock(12345, function(err, hockServer) {\n\n        hockServer\n            .get('/some/url')\n            .reply(200, 'Hello!');\n\n        request('http://localhost:12345/some/url', function(err, res, body) {\n           console.log(body);\n        });\n    });\n\n```\n\nUnlike Nock, you create a `Hock` server with a callback based factory method. Behind the scenes, this spins up the new HTTP service, and begins listening to requests.\n\n## HTTP Methods\n\nHock supports the 5 primary HTTP methods at this time:\n\n* GET\n* POST\n* PUT\n* DELETE\n* HEAD\n\n```Javascript\n    // Returns a hock Request object\n    var req = hockServer.get(url, requestHeaders);\n```\n\n```Javascript\n    // Returns a hock Request object\n    var req = hockServer.delete(url, requestHeaders);\n```\n\n```Javascript\n    // Returns a hock Request object\n    var req = hockServer.post(url, body, requestHeaders);\n```\n\n```Javascript\n    // Returns a hock Request object\n    var req = hockServer.put(url, body, requestHeaders);\n```\n\n```Javascript\n    // Returns a hock Request object\n    var req = hockServer.head(url, requestHeaders);\n```\n\n## Request Object\n\nAll of these methods return an instance of a `Request`, a hock object which contains all of the state for a mocked request. To define the response and enqueue into the `hockServer`, call either `reply` or `replyWithFile` on the `Request` object:\n\n```Javascript\n    // returns the current hockServer instance\n    req.reply(statusCode, body, responseHeaders);\n```\n\n```Javascript\n    // returns the current hockServer instance\n    req.replyWithFile(statusCode, filePath, responseHeaders);\n```\n\n## Chaining requests\n\nAs the `reply` and `replyWithFile` methods return the current hockServer, you can chain them together:\n\n```Javascript\n\n    hockServer.put('/path/one', {\n        foo: 1,\n        bar: {\n            baz: true\n            biz: 'asdf1234'\n        }\n    })\n    .reply(202, {\n        status: 'OK'\n    })\n    .get('/my/file/should/be/here')\n    .replyWithFile(200, __dirname + '/foo.jpg');\n\n```\n\n## Matching requests\n\nWhen a request comes in, hock iterates through the queue in a First-in-first-out approach, so long as the request matches. The criteria for matching is based on the method and the url, and additionally the request body if the request is a `PUT` or `POST`. If you specify request headers, they will also be matched against before sending the response.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mmalecki/hock/issues"
  },
  "_id": "hock@0.2.0",
  "dist": {
    "shasum": "6e800ee921402c40b7dc3f2c0a959e306040f8e7"
  },
  "_from": "hock@~0.2.0",
  "_resolved": "https://registry.npmjs.org/hock/-/hock-0.2.0.tgz"
}
